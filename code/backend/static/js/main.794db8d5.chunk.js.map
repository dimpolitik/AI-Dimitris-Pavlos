{"version":3,"sources":["App.js","services/fishType.js","reportWebVitals.js","index.js"],"names":["xhrResponseSum","Preview","meta","fileWithMeta","name","percent","status","previewUrl","xhr","className","width","src","alt","title","max","value","xType","height","yDomain","xDistance","style","backgroundColor","tickLabelAngle","text","fontSize","stroke","data","JSON","parse","response","includes","class","display","stringify","responseText","App","useState","fishType","setFishType","fishTypes","setFishTypes","useEffect","fetch","then","json","items","map","f","description","type","model","checked","onChange","e","currentTarget","classeName","getUploadParams","file","body","FormData","append","url","maxFiles","timeout","styles","dropzone","overflow","border","background","inputLabelWithFiles","margin","canRemove","PreviewComponent","accept","onClick","element","document","createElement","getLastElemIndex","getElementsByClassName","length","Blob","innerHTML","href","URL","createObjectURL","download","appendChild","click","target","window","location","reload","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.794db8d5.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport 'react-dropzone-uploader/dist/styles.css';\r\nimport './App.css';\r\nimport Dropzone from 'react-dropzone-uploader';\r\nimport { getFishType } from './services/fishType';\r\nimport { API_URL } from './constants';\r\nimport {\r\n  XYPlot,\r\n  XAxis,\r\n  YAxis,\r\n  VerticalGridLines,\r\n  HorizontalGridLines,\r\n  VerticalBarSeries,\r\n} from 'react-vis';\r\n\r\nlet { xhrResponseSum } = '';\r\n\r\n// preview component\r\nconst Preview = ({ meta, fileWithMeta }) => {\r\n  const { name, percent, status, previewUrl } = meta;\r\n  const { xhr } = fileWithMeta;\r\n\r\n  return (\r\n    <div className=\"preview-box\">\r\n        <div className=\"preview-image\">\r\n            {previewUrl && <img width={200} src={previewUrl} alt={name} title={name} />}\r\n            <span className=\"name\">{name}</span>\r\n        </div>\r\n        <div className=\"preview-progress\">\r\n            {status !== \"done\" && <progress max={100} value={status === 'done' || status === 'headers_received' ? 100 : percent} />}\r\n            {status !== \"done\" && <span className=\"status\">{status}</span>}\r\n        </div>\r\n        <div className=\"preview-plot\">\r\n            {status === \"done\" && <XYPlot xType=\"ordinal\" width={500} height={220} yDomain={[0, 1]} xDistance={10} style={{backgroundColor: '#ffffff'}}>\r\n            <XAxis title=\"Age\" tickLabelAngle={-0} style={{text: {fontSize: 12}, }} />\r\n            <YAxis title=\"Probability\"/>\r\n            <VerticalGridLines />\r\n            <HorizontalGridLines style={{stroke: '#B7E9ED'}} />\r\n            <VerticalBarSeries data={JSON.parse(xhr.response)} />\r\n        </XYPlot>}\r\n        </div>\r\n\t\t{status !== \"done\" && <h3>{xhrResponseSum = ''}</h3>}\r\n\t\t{status === \"done\" && !xhrResponseSum.includes(xhr.response) && <div class=\"myText\" style={{display: \"none\"}}>{xhrResponseSum += JSON.stringify(name) + ': ' + xhr.responseText + ','}</div>}\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction App() {\r\n    const [fishType, setFishType] = useState(\"\");\r\n\r\n    const [fishTypes, setFishTypes] = useState([]);\r\n    useEffect(() => {\r\n        getFishType()\r\n        .then(data => {\r\n            setFishTypes(data.items);\r\n        })\r\n        .then(() => {\r\n            // /setFishType(fishTypes[0].model);\r\n        });\r\n    }, []);\r\n\r\n    // specify upload params and API url to file upload\r\n    const getUploadParams = ({ file }) => {\r\n        const body = new FormData();\r\n        body.append('images', file);\r\n        body.append('fishType', fishType);\r\n        return { url: /*API_URL +*/ '/predict', body }\r\n    }\r\n\r\n\tconst downloadTxtFile = () => {\r\n\t\tconst element = document.createElement(\"a\");\r\n\t\tconst getLastElemIndex = document.getElementsByClassName('myText').length - 1;\r\n\t\tconst file = new Blob([document.getElementsByClassName('myText')[getLastElemIndex].innerHTML], {type: 'text/plain'});\r\n\t\telement.href = URL.createObjectURL(file);\r\n\t\telement.download = \"myFile.txt\";\r\n\t\tdocument.body.appendChild(element); // Required for this to work in FireFox\r\n\t\telement.click();\r\n\t  }\r\n\t  \r\n\tfunction refreshPage() {\r\n        window.location.reload();\r\n    }  \r\n  \r\n    const [isOpen, setIsOpen] = useState(false);\r\n      \r\n    return (\r\n    <div className=\"App\">\r\n          \r\n      <h3>1. Select Fish Type</h3>\r\n      <div className=\"fish-type-selector\">\r\n          {fishTypes.map(f => (\r\n        <div className=\"form-check form-check-inline\">\r\n          <label className=\"form-check-label\">\r\n          {f.description}\r\n          <input\r\n            type=\"radio\"\r\n            name=\"fishType\"\r\n            className=\"form-check-input\"\r\n            key={f.model}\r\n            value={f.model}\r\n            checked={fishType === f.model}\r\n            onChange={e => setFishType(e.currentTarget.value)}\r\n          />\r\n          </label>\r\n        </div>\r\n      ))}\r\n      </div>\r\n      <h3>2. Drop or Choose Otolith Images (.jpg or .png, max = 50)</h3>\r\n      <div classeName=\"file-dropzone\">\r\n        {fishType && <Dropzone\r\n          getUploadParams={getUploadParams}\r\n          maxFiles={50}\r\n          timeout={5000}\r\n          styles={{\r\n            dropzone: { overflow: 'auto', height: '350px', border: '1px solid #999', background: '#f5f5f5' },\r\n            inputLabelWithFiles: { margin: '20px 3%' }\r\n          }}\r\n          canRemove={false}\r\n          PreviewComponent={Preview}\r\n          accept=\"image/*,\"\r\n        />\r\n        }\r\n      </div>\r\n\t  <div>\r\n         <button onClick={downloadTxtFile}>Download JSON</button>     \r\n         <a href=\"https://cloudfs.hcmr.gr/index.php/s/fxeo8zXbr4zph9W/download\" target=\"_blank\" download= 'Json2Excel.r' > \r\n          <button>\r\n            <i className=\"fas fa-download\"/>\r\n              Convert JSON to Excel (R-file)\r\n          </button>\r\n        </a>   \r\n        &nsbp;\r\n      </div>\r\n          \r\n      <div>\r\n        <button onClick={ refreshPage }>Refresh page</button>\r\n      </div>\r\n      \r\n    </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { API_URL } from '../constants';\r\n\r\nexport function getFishType() {\r\n  return fetch(/*API_URL +*/ '/fishtype')\r\n    .then(data => data.json())\r\n    //.catch(error => console.log(error));\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}