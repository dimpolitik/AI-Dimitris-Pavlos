{"version":3,"sources":["App.js","services/fishType.js","reportWebVitals.js","index.js"],"names":["xhrResponseSum","Preview","meta","fileWithMeta","name","percent","status","previewUrl","xhr","className","width","src","alt","title","max","value","xType","height","yDomain","xDistance","style","backgroundColor","tickLabelAngle","text","fontSize","stroke","data","response","JSON","parse","includes","class","display","stringify","replace","responseText","App","useState","fishType","setFishType","fishTypes","setFishTypes","useEffect","fetch","then","json","items","map","f","description","type","model","checked","onChange","e","currentTarget","classeName","getUploadParams","file","body","FormData","append","url","maxFiles","timeout","styles","dropzone","overflow","border","background","inputLabelWithFiles","margin","canRemove","PreviewComponent","accept","onClick","jsonStr","btnCsv","document","createElement","getLastElemIndex","getElementsByClassName","length","innerHTML","num","fishName","fishSize","k","parseInt","csvStr","j","index","max_value","fishAgeProbabilities","str","i","parseFloat","y","toFixed","csvFile","Blob","href","URL","createObjectURL","download","appendChild","click","window","location","reload","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9cb07e96.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport 'react-dropzone-uploader/dist/styles.css';\r\nimport './App.css';\r\nimport Dropzone from 'react-dropzone-uploader';\r\nimport { getFishType } from './services/fishType';\r\nimport { API_URL } from './constants';\r\nimport {\r\n  XYPlot,\r\n  XAxis,\r\n  YAxis,\r\n  VerticalGridLines,\r\n  HorizontalGridLines,\r\n  VerticalBarSeries,\r\n} from 'react-vis';\r\n\r\nlet { xhrResponseSum } = '';\r\n\r\n// preview component\r\nconst Preview = ({ meta, fileWithMeta }) => {\r\n  const { name, percent, status, previewUrl } = meta;\r\n  const { xhr } = fileWithMeta;\r\n\r\n  return (\r\n    <div className=\"preview-box\">\r\n        <div className=\"preview-image\">\r\n            {previewUrl && <img width={200} src={previewUrl} alt={name} title={name} />}\r\n            <span className=\"name\">{name}</span>\r\n        </div>\r\n        <div className=\"preview-progress\">\r\n            {status !== \"done\" && <progress max={100} value={status === 'done' || status === 'headers_received' ? 100 : percent} />}\r\n            {status !== \"done\" && <span className=\"status\">{status}</span>}\r\n        </div>\r\n        <div className=\"preview-plot\">\r\n            {status === \"done\" && <XYPlot xType=\"ordinal\" width={500} height={220} yDomain={[0, 1]} xDistance={10} style={{backgroundColor: '#ffffff'}}>\r\n            <XAxis title=\"Age\" tickLabelAngle={-0} style={{text: {fontSize: 12}, }} />\r\n            <YAxis title=\"Probability\"/>\r\n            <VerticalGridLines />\r\n            <HorizontalGridLines style={{stroke: '#B7E9ED'}} />\r\n            <VerticalBarSeries data={xhr.response ? JSON.parse(xhr.response) : null} />\r\n        </XYPlot>}\r\n        </div>\r\n\t\t{status !== \"done\" && <h3>{xhrResponseSum = ''}</h3>}\r\n\t\t{status === \"done\" && !xhrResponseSum.includes(xhr.response) && <div class=\"jsonContentDiv\" style={{display: \"none\"}}>{'{'}{xhrResponseSum += ((xhrResponseSum) ? ',' : '') + JSON.stringify(name.replace(/\\.[^/.]+$/, \"\")) + ': ' + xhr.responseText}{'}'}</div>}\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction App() {\r\n    const [fishType, setFishType] = useState(\"\");\r\n\r\n    const [fishTypes, setFishTypes] = useState([]);\r\n    useEffect(() => {\r\n        getFishType()\r\n        .then(data => {\r\n            setFishTypes(data.items);\r\n        })\r\n        .then(() => {\r\n            // /setFishType(fishTypes[0].model);\r\n        });\r\n    }, []);\r\n\r\n    // specify upload params and API url to file upload\r\n    const getUploadParams = ({ file }) => {\r\n        const body = new FormData();\r\n        body.append('images', file);\r\n        body.append('fishType', fishType);\r\n        return { url: /*API_URL +*/ '/predict', body }\r\n    }\r\n\r\n\tconst downloadJsonFile = () => {\r\n\t\tconst btnJson = document.createElement(\"a\");\r\n\t\tconst getLastElemIndex = document.getElementsByClassName('jsonContentDiv').length - 1;\r\n\t\tconst jsonFile = new Blob([document.getElementsByClassName('jsonContentDiv')[getLastElemIndex].innerHTML], {type: 'application/json'});\r\n\t\tbtnJson.href = URL.createObjectURL(jsonFile);\r\n\t\tbtnJson.download = \"export.json\";\r\n\t\tdocument.body.appendChild(btnJson); // Required for this to work in FireFox\r\n\t\tbtnJson.click();\r\n\t}\r\n\t\r\n\tconst downloadCsvFile = () => {\r\n\t\tconst btnCsv = document.createElement(\"a\");\r\n\t\tconst getLastElemIndex = document.getElementsByClassName('jsonContentDiv').length - 1;\r\n\t\t\r\n\t\tlet jsonStr = '';\r\n\t\tjsonStr = document.getElementsByClassName('jsonContentDiv')[getLastElemIndex].innerHTML;\r\n\t\t\r\n        const json = JSON.parse(jsonStr);\r\n        \r\n\t\tlet num = 0;  \r\n\t\tfor (const fishName in json) {\r\n\t\t  var fishSize = json[fishName]; \t\r\n\t\t  for (let k = 0; k < 2; k++) {\r\n\t\t    num = parseInt(fishSize.length);\r\n\t\t  }\r\n\t\t}\r\n\t\t\t\t\r\n\t\t// add header\r\n\t\t//let csvStr = 'Image/Age-groups' + ', ' + '0' + ', ' + '1' + ', ' + '2' + ', ' + '3' + ', ' + '4' + ', ' + '5+' + '\\r\\n';\r\n\t\r\n        let csvStr = 'Image/Age group probabilities';\r\n\t\tif (num == 6){\r\n\t\t\tfor (let j = 0; j < num; j++) {\r\n              csvStr +=  ', ' + 'Age-' + j;\r\n            }\r\n\t\t} else {\r\n\t\t\tfor (let j = 1; j <= num; j++) {\r\n              csvStr +=  ', ' + 'Age-' + j;\r\n            }   \r\n\t\t}\r\n\t\tcsvStr += ', ' + 'Age-prediction' + '\\r\\n';\r\n\t\t\r\n\t\tlet index = {}\r\n        for (const fishName in json) {\r\n\t\t  let max_value = 0\r\n          var fishAgeProbabilities = json[fishName];\r\n          let str = fishName + ', ';\r\n          for (let i = 0; i < fishAgeProbabilities.length; i++) {\r\n            str += parseFloat(fishAgeProbabilities[i].y).toFixed(2);\r\n\r\n\t\t\tif (parseFloat(fishAgeProbabilities[i].y).toFixed(3) > max_value) {\r\n\t\t\t  max_value = parseFloat(fishAgeProbabilities[i].y).toFixed(3)\r\n\t\t\t  index = parseInt(i);\r\n\t\t\t}\r\n            if (i < fishAgeProbabilities.length) {\r\n              str +=  ', ';\r\n            }\r\n          }\r\n\t\t  \r\n\t\t  if (num != 6) {index += 1}\r\n\t\t  str += index\r\n          csvStr += str + '\\r\\n';\r\n        }\r\n        const csvFile = new Blob([csvStr], {type: 'text/csv'});\r\n\t\tbtnCsv.href = URL.createObjectURL(csvFile);\r\n\t\tbtnCsv.download = \"export.csv\";\r\n\t\tdocument.body.appendChild(btnCsv); // Required for this to work in FireFox\r\n\t\tbtnCsv.click();\r\n\t}\r\n\t  \r\n\tfunction refreshPage() {\r\n        window.location.reload();\r\n    }  \r\n  \r\n    const [isOpen, setIsOpen] = useState(false);\r\n      \r\n    return (\r\n    <div className=\"App\">\r\n          \r\n      <h3>1. Select Fish Type</h3>\r\n      <div className=\"fish-type-selector\">\r\n          {fishTypes.map(f => (\r\n        <div className=\"form-check form-check-inline\">\r\n          <label className=\"form-check-label\">\r\n          {f.description}\r\n          <input\r\n            type=\"radio\"\r\n            name=\"fishType\"\r\n            className=\"form-check-input\"\r\n            key={f.model}\r\n            value={f.model}\r\n            checked={fishType === f.model}\r\n            onChange={e => setFishType(e.currentTarget.value)}\r\n          />\r\n          </label>\r\n        </div>\r\n      ))}\r\n      </div>\r\n      <h3>2. Drop or Choose Otolith Images (.jpg or .png, max = 30 per minute)</h3>\r\n      <div classeName=\"file-dropzone\">\r\n        {fishType && <Dropzone\r\n          getUploadParams={getUploadParams}\r\n          maxFiles={30}\r\n          timeout={60000}\r\n          styles={{\r\n            dropzone: { overflow: 'auto', height: '350px', border: '1px solid #999', background: '#f5f5f5' },\r\n            inputLabelWithFiles: { margin: '20px 3%' }\r\n          }}\r\n          canRemove={false}\r\n          PreviewComponent={Preview}\r\n          accept=\"image/*,\"\r\n        />\r\n        }\r\n      </div>\r\n\t  <div>\r\n         <button onClick={downloadCsvFile}>Export to CSV</button>&nbsp;\r\n         <button onClick={ refreshPage }>Refresh page</button>\t\r\n      </div>\r\n     \r\n      \r\n    </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { API_URL } from '../constants';\r\n\r\nexport function getFishType() {\r\n  return fetch(/*API_URL +*/ '/fishtype')\r\n    .then(data => data.json())\r\n    //.catch(error => console.log(error));\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}